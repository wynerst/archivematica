---
name: "Test"
on:
  pull_request:
  push:
    branches:
      - "qa/**"
      - "stable/**"
      - "dev/issue-1140-test-settings"
jobs:
  select-runner:
    name: "Select tests to run"
    runs-on: "ubuntu-18.04"
    outputs:
      use_docker: ${{ steps.check.outputs.hack_exists }}
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v2"
      - name: "Check if hack directory exists"
        id: check
        run: |
          echo "::set-output name=hack_exists::$(if [ -d hack ]; then echo 'true'; else echo 'false'; fi)"
      - name: "Print result"
        run: |
          echo "${{ steps.check.outputs.hack_exists }}"
  test-with-old-tox:
    needs: select-runner
    if: needs.select-runner.outputs.use_docker == 'false'
    name: "Test ${{ matrix.name }}"
    runs-on: "ubuntu-18.04"
    strategy:
      matrix:
        include:
          - name: "py27"
            python-version: "2.7"
            toxenv: "py27"
          - name: "py27-mcpserver"
            python-version: "2.7"
            toxenv: "mcpserver"
          - name: "py27-checkformigrations"
            python-version: "2.7"
            toxenv: "checkformigrations"
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v2"
      - name: "Set up Python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install OS packages"
        run: |
          sudo apt-get --quiet update
          sudo apt-get install --quiet --yes build-essential \
            libmysqlclient-dev libsasl2-dev libldap2-dev libssl-dev \
            p7zip-full unar libxml2-dev libxslt1-dev
      - name: "Get pip cache dir"
        id: "pip-cache"
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: "Cache pip packages"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.pip-cache.outputs.dir }}"
          key: "${{ runner.os }}-pip-${{ hashFiles('**/test.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Install tox"
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: "Run tox"
        env:
          TOXENV: ${{ matrix.toxenv }}
        run: |
          tox
  test-with-new-tox-and-sqlite:
    needs: select-runner
    if: needs.select-runner.outputs.use_docker == 'true'
    name: "Test ${{ matrix.toxenv }}"
    runs-on: "ubuntu-18.04"
    strategy:
      matrix:
        toxenv:
          - archivematica-common
          - dashboard
          - mcpserver
          - mcpclient
          - mcpclient-ensure-no-mutable-globals
          - storage-service
          - checkformigrations-dashboard
          - checkformigrations-storage-service
          - linting
        python-version:
          - '2.7'
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v2"
      - name: "Check out the archivematica-storage-service submodule"
        run: |
          git submodule update --init hack/submodules/archivematica-storage-service/
      - name: "Set up Python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install OS packages"
        run: |
          sudo apt-get --quiet update
          sudo apt-get install --quiet --yes build-essential \
            libmysqlclient-dev libsasl2-dev libldap2-dev libssl-dev \
            p7zip-full unar libxml2-dev libxslt1-dev
      - name: "Get pip cache dir"
        id: "pip-cache"
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: "Cache pip packages"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.pip-cache.outputs.dir }}"
          key: "${{ runner.os }}-pip-${{ hashFiles('**/test.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Set up tox cache"
        uses: "actions/cache@v2"
        with:
          path: ./.tox
          key: "${{ runner.os }}-tox-sqlite-${{ matrix.toxenv }}-${{ hashFiles('**/tox.ini') }}"
          restore-keys: |
            ${{ runner.os }}-tox-sqlite-${{ matrix.toxenv }}-
            ${{ runner.os }}-tox-sqlite-
      - name: "Install tox"
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: "Run tox"
        env:
          TOXENV: ${{ matrix.toxenv }}
          PYTEST_ADDOPTS: -vv
        run: |
          tox -vv
  test-with-new-tox-and-mysql:
    needs: select-runner
    if: needs.select-runner.outputs.use_docker == 'true'
    name: "Test ${{ matrix.toxenv }}/${{ matrix.python-version }}/${{ matrix.percona-version }}"
    runs-on: "ubuntu-18.04"
    strategy:
      matrix:
        toxenv:
          - archivematica-common
          - dashboard
          - mcpserver
          - mcpclient
          - mcpclient-ensure-no-mutable-globals
          - storage-service
          - checkformigrations-dashboard
          - checkformigrations-storage-service
          - linting
        python-version:
          - '2.7'
        percona-version:
          - '5.6'
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v2"
      - name: "Check out the archivematica-storage-service submodule"
        run: |
          git submodule update --init hack/submodules/archivematica-storage-service/
      - name: "Set hostname for MySQL connection"
        run: |
          sudo hostnamectl set-hostname mysql
      - name: "Run MySQL"
        run: |
          docker run -d --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=12345 -e MYSQL_USER=archivematica -e MYSQL_PASSWORD=demo --health-cmd "mysqladmin ping -h localhost" --health-interval 10s --health-timeout 5s --health-retries 5 percona:${{ matrix.percona-version }} --character-set-server=utf8 --collation-server=utf8_general_ci
          ./hack/wait-for-it.sh mysql:3306 --timeout=30
      - name: "Create dashboard migrations test database"
        if: matrix.toxenv == 'checkformigrations-dashboard'
        run: |
          docker exec mysql mysql -h 127.0.0.1 -P 3306 --protocol=tcp -u root -p12345 -e 'CREATE DATABASE `DASHBOARDTEST`; GRANT ALL ON `DASHBOARDTEST`.* TO "archivematica"@"%" IDENTIFIED BY "demo";'
      - name: "Create storage service migrations test database"
        if: matrix.toxenv == 'checkformigrations-storage-service'
        run: |
          sleep 15
          docker exec mysql mysql -h 127.0.0.1 -P 3306 --protocol=tcp -u root -p12345 -e 'CREATE DATABASE `SSTEST`; GRANT ALL ON `SSTEST`.* TO "archivematica"@"%" IDENTIFIED BY "demo";'
      - name: "Set up Python ${{ matrix.python-version }}"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install OS packages"
        run: |
          sudo apt-get --quiet update
          sudo apt-get install --quiet --yes build-essential \
            libmysqlclient-dev libsasl2-dev libldap2-dev libssl-dev \
            p7zip-full unar libxml2-dev libxslt1-dev
      - name: "Get pip cache dir"
        id: "pip-cache"
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: "Cache pip packages"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.pip-cache.outputs.dir }}"
          key: "${{ runner.os }}-pip-${{ hashFiles('**/test.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Set up tox cache"
        uses: "actions/cache@v2"
        with:
          path: ./.tox
          key: "${{ runner.os }}-tox-mysql-${{ matrix.toxenv }}-${{ hashFiles('**/tox.ini') }}"
          restore-keys: |
            ${{ runner.os }}-tox-mysql-${{ matrix.toxenv }}-
            ${{ runner.os }}-tox-mysql-
      - name: "Install tox"
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: "Run tox"
        env:
          DJANGO_SETTINGS_MODULE: settings.testmysql
          TOXENV: ${{ matrix.toxenv }}
          PYTEST_ADDOPTS: -vv
        run: |
          tox -vv
      - name: "Stop MySQL"
        run: |
          docker stop mysql
  test-with-docker:
    needs: select-runner
    if: needs.select-runner.outputs.use_docker == 'true'
    name: "Test ${{ matrix.rule }}"
    runs-on: "ubuntu-18.04"
    strategy:
      matrix:
        rule:
          - mcp-server
          - mcp-client
          - dashboard
          - archivematica-common
          - storage-service
          - checkformigrations
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v2"
      - name: "Check out the archivematica-storage-service submodule"
        run: |
          git submodule update --init hack/submodules/archivematica-storage-service/
      - name: "Set up pip cache"
        uses: "actions/cache@v2"
        with:
          path: "~/.cache/pip"
          key: "${{ runner.os }}-pip-${{ github.sha }}"
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: "Set up tox cache"
        uses: "actions/cache@v2"
        with:
          path: ./.tox
          key: "${{ runner.os }}-tox-docker-${{ matrix.rule }}-${{ hashFiles('**/tox.ini') }}"
          restore-keys: |
            ${{ runner.os }}-tox-docker-${{ matrix.rule }}-
            ${{ runner.os }}-tox-docker-
      - name: "Set up buildx"
        uses: "docker/setup-buildx-action@v1"
        id: buildx
        with:
          install: true
      - name: "Set up docker cache"
        uses: "actions/cache@v2"
        with:
          path: /tmp/.docker-cache-old
          key: ${{ runner.os }}-docker-cache-${{ matrix.rule }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-cache-${{ matrix.rule }}-
            ${{ runner.os }}-docker-cache-
      - name: "Build archivematica-tests image"
        uses: "docker/build-push-action@v2"
        with:
          context: .
          file: ./hack/Dockerfile
          target: archivematica-tests
          tags: archivematica-tests:latest
          push: false
          load: true
          cache-from: type=local,src=/tmp/.docker-cache-old
          cache-to: type=local,dest=/tmp/.docker-cache-new,mode=max
      - name: "Create external volumes"
        run: |
          make -C hack/ create-volumes
      - name: "Run make rule"
        run: |
          make -C hack/ test-${{ matrix.rule }}
        env:
          TOXARGS: -vv
          PYTEST_ADDOPTS: -vv
      - name: "Set newest docker cache"
        run: |
          rm -rf /tmp/.docker-cache-old
          mv /tmp/.docker-cache-new /tmp/.docker-cache-old
  frontend:
    name: "Test frontend"
    runs-on: "ubuntu-18.04"
    defaults:
      run:
        working-directory: "./src/dashboard/frontend/"
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v2"
      - name: "Set up Node JS"
        uses: "actions/setup-node@v2-beta"
        with:
          node-version: "8"
      - name: "Cache npm packages"
        uses: "actions/cache@v2"
        with:
          path: "~/.npm"
          key: "${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}"
          restore-keys: |
            ${{ runner.os }}-node-
      - name: "Install frontend dependencies"
        run: |
          npm install
      - name: "Run tests"
        run: |
          npm run "test-single-run"
  linting:
    name: "Lint"
    runs-on: "ubuntu-18.04"
    steps:
      - name: "Check out repository"
        uses: "actions/checkout@v2"
      - name: "Set up Python 3.7"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.7"
      - name: "Install tox"
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: "Run tox"
        run: |
          tox -e linting
